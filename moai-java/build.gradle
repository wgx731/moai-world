buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        // TODO: upgrade spotbugs-gradle-plugin once warning is fixed
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.9"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
        classpath "io.franzbecker:gradle-lombok:2.1"
    }
}

apply plugin: 'java'
apply plugin: 'net.ltgt.apt'
apply plugin: 'jacoco'
apply plugin: 'com.github.spotbugs'
apply plugin: 'io.franzbecker.gradle-lombok'

jar {
    baseName = 'moai-java'
}

dependencies {
    
    compile('org.apache.commons:commons-lang3')
    compile('com.fasterxml.jackson.core:jackson-databind')
    compile('org.apache.logging.log4j:log4j-core')
    compile('org.apache.logging.log4j:log4j-api')
    compile('org.apache.logging.log4j:log4j-slf4j-impl')
    compile('com.lmax:disruptor')

    compile('com.github.spotbugs:spotbugs')
    compileOnly('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    testCompile('junit:junit')
    testCompile('org.mockito:mockito-core')
    testCompile('org.assertj:assertj-core')
    testAnnotationProcessor('org.projectlombok:lombok')

}

jacoco {
    toolVersion = "${jacocoVersion}"
}

spotbugs {
    toolVersion = "${spotbugsVersion}"
}

jacocoTestReport {

    reports {
        html.enabled = true
        csv.enabled = false
        xml.enabled = false
    }

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/github/wgx731/**/Main*',
                    'com/github/wgx731/Main*'
            ])
        }))
    }

}

jacocoTestCoverageVerification {

    violationRules {
        rule {
            limit {
                minimum = 0.85
            }
        }
    }

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/github/wgx731/**/Main*',
                    'com/github/wgx731/Main*'
            ])
        }))
    }

}

sourceCompatibility = "${javaVersion}"
targetCompatibility = "${javaVersion}"

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all,-processing"
}

lombok {
    version = "${lombokVersion}"
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir

    options.addBooleanOption('html5', true)
    failOnError = false
}
