buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        // NOTE: last checked date: 2019-09-03
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0'
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.18'
        classpath 'io.franzbecker:gradle-lombok:3.1.0'
    }
}

allprojects {

    // NOTE: last checked date: 2019-09-03
    ext {
        projectGroup = 'com.github.wgx731'
        projectVersion = '1.0.0.RELEASE'

        javaVersion = '12'

        asciidoctorVersion = '1.6.1'
        jacocoVersion = '0.8.4'
        spotbugsVersion = '3.1.12'

        springBootVersion = '2.1.7.RELEASE'
        apacheCommonLangVersion = '3.9'
        apacheCommonVfsVersion = '2.4.1'
        jschVersion = '0.1.55'
        jacksonVersion = '2.9.9'
        lombokVersion = '1.18.8'
        log4j2Version = '2.12.1'
        javaxXmlJaxbVersion = '2.3.1'
        disuptorVersion = '3.4.2'

        junitVersion = '5.5.1'
        assertjVersion = '3.13.2'
        mockitoVersion = '3.0.0'
        springBootAdminVersion = '2.1.5'
        vaadinVersion = '14.0.4'
        kaributestingVersion = '1.1.9'
    }

    repositories {
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'

    group = "${projectGroup}"
    version = "${projectVersion}"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
        dependencies {
            dependency "javax.xml.bind:jaxb-api:${javaxXmlJaxbVersion}"

            dependency "com.github.spotbugs:spotbugs:${spotbugsVersion}"
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "org.junit.jupiter:junit-jupiter:${junitVersion}"
            dependency "org.mockito:mockito-core:${mockitoVersion}"
            dependency "org.assertj:assertj-core:${assertjVersion}"
            dependency "org.apache.commons:commons-lang3:${apacheCommonLangVersion}"
            dependency "org.apache.commons:commons-vfs2:${apacheCommonVfsVersion}"
            dependency "com.jcraft:jsch:${jschVersion}"
            dependency "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            dependency "org.apache.logging.log4j:log4j-core:${log4j2Version}"
            dependency "org.apache.logging.log4j:log4j-api:${log4j2Version}"
            dependency "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}"
            dependency "com.github.mvysny.kaributesting:karibu-testing-v10:${kaributestingVersion}"
        }
    }

}

subprojects {

    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'java'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'jacoco'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'idea'
    apply plugin: "io.franzbecker.gradle-lombok"

    jar {
        onlyIf { !sourceSets.main.allSource.files.isEmpty() }
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }

    spotbugs {
        toolVersion = "${spotbugsVersion}"
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            html.enabled true
            csv.enabled true
        }
    }

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    dependencies {
        implementation 'com.github.spotbugs:spotbugs'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.assertj:assertj-core'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all,-processing"
    }

    lombok {
        version = "${lombokVersion}"
    }

    task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
        ext.outputDir = file("$buildDir/delombok")
        outputs.dir(outputDir)
        sourceSets.main.java.srcDirs.each {
            inputs.dir(it)
            args(it, "-d", outputDir)
        }
    }

    javadoc {
        dependsOn delombok
        source = delombok.outputDir

        options.locale = 'en_US'
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addBooleanOption('html5', true)
        failOnError = false
    }

}

