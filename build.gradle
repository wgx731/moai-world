// NOTE: last checked date: 2019-Jan-31

plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.github.spotbugs' version '3.0.0'
    id 'io.franzbecker.gradle-lombok' version '3.2.0'
    id 'java'
    id 'idea'
    id 'maven-publish'
}

allprojects {

    ext {
        projectGroup = 'com.github.wgx731'
        projectVersion = '1.3.0.RELEASE'

        javaVersion = '11'

        jacocoVersion = '0.8.5'
        spotbugsVersion = '3.1.12'

        springBootVersion = '2.2.4.RELEASE'
        vaadinVersion = '14.1.16'

        apacheCommonLangVersion = '3.9'
        apacheCommonVfsVersion = '2.6.0'
        jschVersion = '0.1.55'
        jacksonVersion = '2.10.2'
        lombokVersion = '1.18.10'
        log4j2Version = '2.13.0'

        junitVersion = '5.6.0'
        assertjVersion = '3.15.0'
        mockitoVersion = '3.2.4'
        kaributestingVersion = '1.1.19'
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'


    group = "${projectGroup}"
    version = "${projectVersion}"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
        }
        dependencies {
            dependency "com.github.spotbugs:spotbugs:${spotbugsVersion}"
            dependency "org.projectlombok:lombok:${lombokVersion}"

            dependency "org.apache.commons:commons-lang3:${apacheCommonLangVersion}"
            dependency "org.apache.commons:commons-vfs2:${apacheCommonVfsVersion}"
            dependency "com.jcraft:jsch:${jschVersion}"
            dependency "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            dependency "org.apache.logging.log4j:log4j-core:${log4j2Version}"
            dependency "org.apache.logging.log4j:log4j-api:${log4j2Version}"
            dependency "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}"

            dependency "org.junit.jupiter:junit-jupiter:${junitVersion}"
            dependency "org.mockito:mockito-core:${mockitoVersion}"
            dependency "org.assertj:assertj-core:${assertjVersion}"
            dependency "com.github.mvysny.kaributesting:karibu-testing-v10:${kaributestingVersion}"
        }
    }

    bootJar {
        enabled false
    }

}

subprojects {

    repositories {
        jcenter()
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'jacoco'
    apply plugin: "io.franzbecker.gradle-lombok"
    apply plugin: "maven-publish"

    configurations {

        all*.exclude module: 'spring-boot-starter-logging'

        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    jar {
        onlyIf { !sourceSets.main.allSource.files.isEmpty() }
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }

    spotbugs {
        toolVersion = "${spotbugsVersion}"
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            html.enabled true
            csv.enabled true
        }
    }

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    dependencies {
        implementation 'com.github.spotbugs:spotbugs'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.assertj:assertj-core'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:all,-processing"
    }

    lombok {
        version = "${lombokVersion}"
    }

    task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {
        ext.outputDir = file("$buildDir/delombok")
        outputs.dir(outputDir)
        sourceSets.main.java.srcDirs.each {
            inputs.dir(it)
            args(it, "-d", outputDir)
        }
    }

    javadoc {
        dependsOn delombok
        source = delombok.outputDir

        options.locale = 'en_US'
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addBooleanOption('html5', true)
        failOnError = false
    }

    publish {
        dependsOn assemble
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/wgx731/moai-world")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                from(components.java)
            }
        }
    }

}
