dependencies {
    implementation project(':moai-java-ak47-common')
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.ldap:spring-ldap-core'
    implementation 'org.springframework.security:spring-security-ldap'
    implementation 'org.springframework:spring-tx'
    implementation 'com.vaadin:vaadin-spring-boot-starter'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.github.mvysny.kaributesting:karibu-testing-v10'
}

springBoot {
    mainClassName = 'com.github.wgx731.ak47.Application'
}

bootJar {
    enabled true
}

test {
    dependsOn spotbugsMain, spotbugsTest
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.3
            }
        }
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/github/wgx731/ak47/Application*',
                    'com/github/wgx731/ak47/service/*',
                    'com/github/wgx731/ak47/security/*',
                    'com/github/wgx731/ak47/config/*',
                    'com/github/wgx731/ak47/vaadin/config/*',
            ])
        }))
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/wgx731/moai-world")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            artifact(bootJar)
        }
    }
}
